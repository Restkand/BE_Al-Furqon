generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Model untuk Authentication
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  username     String    @unique
  password     String
  name         String
  role         Role      @default(user)
  permissions  Json      @default("[]")
  avatar       String?
  isActive     Boolean   @default(true)
  lastLogin    DateTime?
  loginCount   Int       @default(0)
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  sessions UserSession[]

  @@map("users")
}

enum Role {
  super_admin
  admin
  editor
  user
}

// Articles Model (Artikel/Kegiatan)
model Article {
  id           String    @id @default(cuid())
  title        String
  slug         String    @unique
  description  String?
  content      String?
  image        String?
  category     Category
  status       Status    @default(draft)
  authorId     String?
  authorName   String?
  authorAvatar String?
  publishedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  views        Int       @default(0)
  likes        Int       @default(0)
  featured     Boolean   @default(false)
  tags         Json?
  metaData     Json?

  @@index([category])
  @@index([status])
  @@index([featured])
  @@index([publishedAt])
  @@index([category, status, featured])
  @@map("articles")
}

enum Category {
  kegiatan
  berita
  sumbangan
  fasilitas
  profil
  kajian
}

enum Status {
  published
  draft
  archived
}

// Donations Model (Program Donasi)
model Donation {
  id              String         @id @default(cuid())
  title           String
  slug            String         @unique
  description     String
  detail          String?
  image           String?
  targetAmount    Float
  collectedAmount Float          @default(0.00)
  status          DonationStatus @default(active)
  startDate       DateTime?
  endDate         DateTime?
  bankName        String?
  accountNumber   String?
  accountName     String?
  qrisCode        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  totalDonors     Int            @default(0)

  transactions DonationTransaction[]

  @@index([status])
  @@index([targetAmount])
  @@index([collectedAmount])
  @@index([status, createdAt])
  @@map("donations")
}

enum DonationStatus {
  active
  completed
  suspended
}

// Donation Transactions Model
model DonationTransaction {
  id            String            @id @default(cuid())
  donationId    String
  donorName     String
  amount        Float
  email         String?
  phone         String?
  message       String?
  isAnonymous   Boolean           @default(false)
  paymentMethod PaymentMethod
  status        TransactionStatus @default(pending)
  transactionId String?           @unique
  paymentUrl    String?
  expiresAt     DateTime?
  paidAt        DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  donation Donation @relation(fields: [donationId], references: [id], onDelete: Cascade)

  @@index([donationId])
  @@index([status])
  @@index([createdAt])
  @@index([transactionId])
  @@map("donation_transactions")
}

enum PaymentMethod {
  bank_transfer
  qris
  ewallet
  cash
}

enum TransactionStatus {
  pending
  paid
  failed
  cancelled
}

// News Model
model News {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String?
  content     String?
  image       String?
  category    String    @default("umum")
  priority    Priority  @default(medium)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String?
  authorName  String?
  views       Int       @default(0)
  summary     String?
  metaData    Json?

  @@index([category])
  @@index([priority])
  @@index([publishedAt])
  @@index([priority, publishedAt])
  @@map("news")
}

enum Priority {
  high
  medium
  low
}

// Navigation Menus Model
model Menu {
  id          String   @id @default(cuid())
  title       String
  slug        String
  icon        String?
  orderIndex  Int      @default(0)
  isActive    Boolean  @default(true)
  parentId    String?
  description String?
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Menu?  @relation("MenuHierarchy", fields: [parentId], references: [id])
  children Menu[] @relation("MenuHierarchy")

  @@index([orderIndex])
  @@index([isActive])
  @@index([parentId])
  @@map("menus")
}

// Site Statistics Model
model SiteStatistic {
  id          String   @id @default(cuid())
  metricName  String
  metricValue BigInt   @default(0)
  metricDate  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([metricName, metricDate])
  @@index([metricName])
  @@index([metricDate])
  @@map("site_statistics")
}

// Analytics Events Model
model AnalyticsEvent {
  id           String    @id @default(cuid())
  eventType    EventType
  resourceId   String?
  resourceType String?
  sessionId    String?
  userAgent    String?
  referrer     String?
  ipAddress    String?
  createdAt    DateTime  @default(now())
  metadata     Json?

  @@index([eventType])
  @@index([resourceId])
  @@index([createdAt])
  @@index([resourceType, resourceId])
  @@map("analytics_events")
}

enum EventType {
  page_view
  article_view
  donation_view
  download
  share
  user_registration
  admin_login
  donation_payment
}

// Dashboard Cache Model for performance
model DashboardCache {
  id        String   @id @default(cuid())
  cacheKey  String   @unique
  cacheData Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cacheKey])
  @@index([expiresAt])
  @@map("dashboard_cache")
}

// System Settings Model
model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string") // string, number, boolean, json
  category  String   @default("general")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([isActive])
  @@map("system_settings")
}

// Activity Logs Model for audit trail
model ActivityLog {
  id          String   @id @default(cuid())
  userId      String?
  userEmail   String?
  action      String
  resource    String?
  resourceId  String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  description String?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([userId, action])
  @@map("activity_logs")
}

// Visitor Tracking Model
model VisitorTracking {
  id              String    @id @default(cuid())
  visitorId       String // unique visitor identifier
  ipAddress       String
  userAgent       String
  referrerUrl     String?
  landingPage     String
  country         String?
  city            String?
  device          String?
  browser         String?
  os              String?
  sessionStart    DateTime
  sessionEnd      DateTime?
  sessionDuration Int? // in seconds
  pageViews       Int       @default(1)
  isUnique        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([visitorId])
  @@index([sessionStart])
  @@index([ipAddress])
  @@index([isUnique])
  @@index([country])
  @@map("visitor_tracking")
}

// Daily Stats Model for aggregated data
model DailyStats {
  id                  String   @id @default(cuid())
  date                DateTime @unique
  totalVisitors       Int      @default(0)
  uniqueVisitors      Int      @default(0)
  totalPageViews      Int      @default(0)
  totalArticleViews   Int      @default(0)
  totalDonations      Int      @default(0)
  totalDonationAmount Float    @default(0)
  totalNewsViews      Int      @default(0)
  totalUsers          Int      @default(0)
  newUsers            Int      @default(0)
  bounceRate          Float    @default(0)
  avgSessionDuration  Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([date])
  @@map("daily_stats")
}

// Monthly Stats Model for aggregated data
model MonthlyStats {
  id                  String   @id @default(cuid())
  year                Int
  month               Int
  totalVisitors       Int      @default(0)
  uniqueVisitors      Int      @default(0)
  totalPageViews      Int      @default(0)
  totalArticleViews   Int      @default(0)
  totalDonations      Int      @default(0)
  totalDonationAmount Float    @default(0)
  totalNewsViews      Int      @default(0)
  totalUsers          Int      @default(0)
  newUsers            Int      @default(0)
  bounceRate          Float    @default(0)
  avgSessionDuration  Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([year, month])
  @@index([year])
  @@index([month])
  @@map("monthly_stats")
}

// User Sessions Model
model UserSession {
  id        String    @id @default(cuid())
  userId    String?
  sessionId String    @unique
  ipAddress String
  userAgent String
  isActive  Boolean   @default(true)
  loginAt   DateTime  @default(now())
  logoutAt  DateTime?
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("user_sessions")
}
