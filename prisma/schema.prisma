generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Model untuk Authentication
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(user)
  avatar    String?
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

enum Role {
  admin
  editor
  user
}

// Articles Model (Artikel/Kegiatan)
model Article {
  id           String    @id @default(cuid())
  title        String
  slug         String    @unique
  description  String?
  content      String?
  image        String?
  category     Category
  status       Status    @default(draft)
  authorId     String?
  authorName   String?
  authorAvatar String?
  publishedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  views        Int       @default(0)
  likes        Int       @default(0)
  featured     Boolean   @default(false)
  tags         Json?
  metaData     Json?

  @@index([category])
  @@index([status])
  @@index([featured])
  @@index([publishedAt])
  @@index([category, status, featured])
  @@map("articles")
}

enum Category {
  kegiatan
  berita
  sumbangan
  fasilitas
  profil
}

enum Status {
  published
  draft
  archived
}

// Donations Model (Program Donasi)
model Donation {
  id              String         @id @default(cuid())
  title           String
  slug            String         @unique
  description     String
  detail          String?
  image           String?
  targetAmount    Float
  collectedAmount Float          @default(0.00)
  status          DonationStatus @default(active)
  startDate       DateTime?
  endDate         DateTime?
  bankName        String?
  accountNumber   String?
  accountName     String?
  qrisCode        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  totalDonors     Int            @default(0)

  transactions DonationTransaction[]

  @@index([status])
  @@index([targetAmount])
  @@index([collectedAmount])
  @@index([status, createdAt])
  @@map("donations")
}

enum DonationStatus {
  active
  completed
  suspended
}

// Donation Transactions Model
model DonationTransaction {
  id            String            @id @default(cuid())
  donationId    String
  donorName     String
  amount        Float
  email         String?
  phone         String?
  message       String?
  isAnonymous   Boolean           @default(false)
  paymentMethod PaymentMethod
  status        TransactionStatus @default(pending)
  transactionId String?           @unique
  paymentUrl    String?
  expiresAt     DateTime?
  paidAt        DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  donation Donation @relation(fields: [donationId], references: [id], onDelete: Cascade)

  @@index([donationId])
  @@index([status])
  @@index([createdAt])
  @@index([transactionId])
  @@map("donation_transactions")
}

enum PaymentMethod {
  bank_transfer
  qris
  ewallet
  cash
}

enum TransactionStatus {
  pending
  paid
  failed
  cancelled
}

// News Model
model News {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String?
  content     String?
  image       String?
  category    String    @default("umum")
  priority    Priority  @default(medium)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String?
  authorName  String?
  views       Int       @default(0)
  summary     String?
  metaData    Json?

  @@index([category])
  @@index([priority])
  @@index([publishedAt])
  @@index([priority, publishedAt])
  @@map("news")
}

enum Priority {
  high
  medium
  low
}

// Navigation Menus Model
model Menu {
  id          String   @id @default(cuid())
  title       String
  slug        String
  icon        String?
  orderIndex  Int      @default(0)
  isActive    Boolean  @default(true)
  parentId    String?
  description String?
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Menu?  @relation("MenuHierarchy", fields: [parentId], references: [id])
  children Menu[] @relation("MenuHierarchy")

  @@index([orderIndex])
  @@index([isActive])
  @@index([parentId])
  @@map("menus")
}

// Site Statistics Model
model SiteStatistic {
  id          String   @id @default(cuid())
  metricName  String
  metricValue BigInt   @default(0)
  metricDate  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([metricName, metricDate])
  @@index([metricName])
  @@index([metricDate])
  @@map("site_statistics")
}

// Analytics Events Model
model AnalyticsEvent {
  id           String    @id @default(cuid())
  eventType    EventType
  resourceId   String?
  resourceType String?
  sessionId    String?
  userAgent    String?
  referrer     String?
  ipAddress    String?
  createdAt    DateTime  @default(now())
  metadata     Json?

  @@index([eventType])
  @@index([resourceId])
  @@index([createdAt])
  @@index([resourceType, resourceId])
  @@map("analytics_events")
}

enum EventType {
  page_view
  article_view
  donation_view
  download
  share
}
